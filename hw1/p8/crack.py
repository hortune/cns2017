#!/usr/bin/python

import signal, sys, os, time
import random
import hashlib

def alarm(time):
    def handler(signum, frame):
        print 'Timeout'
        exit()
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(time)
     

if __name__ == '__main__':
    # prime
    p = 262603487816194488181258352326988232210376591996146252542919605878805005469693782312718749915099841408908446760404481236646436295067318626356598442952156854984209550714670817589388406059285064542905718710475775121565983586780136825600264380868770029680925618588391997934473191054590812256197806034618157751903
 
    # password is a bunch of integer
    password = [1,1,1]
    assert(len(password) == 3)
    assert(all(0 < i <= 20 for i in password))
    password = [int(hashlib.sha512(str(i)).hexdigest(), 16) for i in password]

    FLAG = "BALSN{CTF FUCK U}"
    FLAG = int(FLAG.strip().encode('hex'), 16)
    print "FLAG", FLAG    
    key = 0
    temp = [1,2,3]
    for i, pwd in enumerate(password):
	
        # Diffie Hellman and g is generated by the password
        print 'Round', i+1
        g = pow(pwd, 2, p)
        print "g",g 
        b = random.randint(2, p)
        B = pow(g, b ,p)    
        temp[i]=B
        print "Server sends:", B
        print "b",b
        print "B",B
        A = int(raw_input("Generate 'a' and send A = g^a mod p to the server: "))
        assert(514 <= A < p-514)
    
        K = pow(A, b, p)
        print "K",K
        key ^= int(hashlib.sha512(str(K)).hexdigest(), 16)

    print 'Flag IS ', key ^int(hashlib.sha512(str(temp[0])).hexdigest(), 16)^int(hashlib.sha512(str(temp[1])).hexdigest(), 16)^int(hashlib.sha512(str(temp[2])).hexdigest(), 16)


    print 'FLAG is:', key ^ FLAG
    print 'FLAG is', '{0:x}'.format(FLAG).decode("hex")
