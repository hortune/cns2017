from IPython import embed
def enc(data,key):
	cipher=""
	for i in range(len(data)):
		cipher+=chr(ord(data[i])^ord(key[i%len(key)]))
	return cipher
def unmerse(num):
	bigmask  = (1<<32) -1
	def unBitshiftRightXor(value, shift):
		i,result = 0,0
		while (i * shift) < 32 :
			partMask = (((bigmask << (32 - shift))&bigmask) >> (shift * i)) & bigmask 
			part = value & partMask
			value ^= part >> shift
			result |= part
			i += 1
  		return result
	def unBitshiftLeftXor(value, shift, mask):
		i = 0
		result = 0
		while (i * shift) < 32 :
			partMask = ((bigmask >> (32 - shift)) << (shift * i))&bigmask
			part = value & partMask
			value ^= (part << shift) & mask
			result |= part
			i += 1
		return result

	value = unBitshiftRightXor(num, 18)
	value = unBitshiftLeftXor(value, 15, 0xefc60000)
	value = unBitshiftLeftXor(value, 7, 0x9d2c5680)
	value = unBitshiftRightXor(value, 11)
	return value

def merse(tmp):
	tmp ^= (tmp >> 11)
	tmp ^= (tmp << 7) & 0x9d2c5680
	tmp ^= (tmp << 15) & 0xefc60000
	tmp ^= (tmp >> 18)
	return tmp

def rev(encrypt,decrypt):
	key = ""	
	for i in range(8):
		key += chr(ord(encrypt[i])^ord(decrypt[i]))
	return int(key.encode('hex').lstrip('0'),16)

seeds = []
N = 666
for i in range(N-312,N):
	with open('flag_{}'.format(i),'rb') as fd, open('../gg/flagpool/flag_{}'.format(i),'r') as fd1:
		encrypt,decrypt = fd.read(), fd1.read()
		assert(len(encrypt)==len(decrypt))
		seeds.append(rev(encrypt,decrypt))

state = []

for i in seeds:
	prefix  =unmerse( i >> 32)
	postfix  = unmerse(i & ((1<<32) - 1))
	state.append(prefix)
	state.append(postfix)
	assert(merse(prefix) == (i>>32))
	assert(merse(postfix) == (i & ((1<<32)-1)))


for i in range(624):
	y = (state[i] & 0x80000000) + (state[(i + 1) % 624] & 0x7fffffff)
	ne = y >> 1
  	ne ^= state[(i + 397) % 624]
  	if ((y & 1) == 1):
    		ne ^= 0x9908b0df
  	state[i] = ne

key =  (merse(state[0])<<32) + merse(state[1])
key="{:0>16}".format(hex(key)[2:].replace("L","")).decode("hex")

k =  open('flag_{}'.format(N),'r').read()
embed()
print (k)
print(enc(k,key))

